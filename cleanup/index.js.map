{"version":3,"file":"index.js","mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrCA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;;ACDA;AACA;AACA;AACA","sources":["../webpack://typescript-action/./src/processManagement.ts","../webpack://typescript-action/external node-commonjs \"fs\"","../webpack://typescript-action/webpack/bootstrap","../webpack://typescript-action/webpack/runtime/compat","../webpack://typescript-action/./src/cleanup.ts"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.killSavedPIDs = exports.savePIDToFile = exports.getSavedPIDs = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst pidsFile = \"/tmp/tunnels/localtunnel-pids.json\";\nconst getSavedPIDs = () => {\n    if (!fs_1.default.existsSync(pidsFile)) {\n        return [];\n    }\n    const pids = fs_1.default.readFileSync(pidsFile, \"utf8\");\n    return JSON.parse(pids);\n};\nexports.getSavedPIDs = getSavedPIDs;\nconst savePIDToFile = (pid) => {\n    const pids = (0, exports.getSavedPIDs)();\n    pids.push(pid);\n    fs_1.default.writeFileSync(pidsFile, JSON.stringify(pids));\n};\nexports.savePIDToFile = savePIDToFile;\nconst killSavedPIDs = () => {\n    const pids = (0, exports.getSavedPIDs)();\n    pids.forEach(pid => {\n        try {\n            process.kill(pid, \"SIGTERM\");\n            console.log(`Killed process ${pid}`);\n        }\n        catch (e) {\n            console.log(`Failed to kill process ${pid}: ${e}`);\n        }\n    });\n    if (fs_1.default.existsSync(pidsFile)) {\n        fs_1.default.unlinkSync(pidsFile);\n    }\n};\nexports.killSavedPIDs = killSavedPIDs;\n","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst processManagement_1 = require(\"./processManagement\");\n(0, processManagement_1.killSavedPIDs)();\n"],"names":[],"sourceRoot":""}